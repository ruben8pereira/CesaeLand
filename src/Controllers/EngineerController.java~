package Controllers;

import Domain.Attraction;
import Domain.Sale;
import Model.AttractionsRepository;
import Model.SalesRepository;

import java.io.FileNotFoundException;
import java.util.ArrayList;

public class EngineerController {
    private AttractionsRepository attractionsRepository;
    private SalesRepository salesRepository;

    public EngineerController() throws FileNotFoundException {
        this.attractionsRepository = new AttractionsRepository();
        this.salesRepository = new SalesRepository();
    }

    /**
     * Gets the upcoming maintenance reviews (3 nearest reviews)
     * Shows attraction ID, name and number of tickets until review
     */
    public void getUpcomingReviews() {
        // Implementing this method as the one required functionality for Engineer
        ArrayList<Attraction> attractions = attractionsRepository.getAttractionsList();
        ArrayList<Sale> sales = salesRepository.getSalesList();

        // Count tickets sold for each attraction
        int[] ticketCounter = new int[11]; // Starting from index 1 to match attraction IDs

        for (Sale sale : sales) {
            ticketCounter[sale.getAttractionId()]++;
        }

        // Create arrays to store attraction information and tickets until review
        int[] attractionIds = new int[attractions.size()];
        String[] attractionNames = new String[attractions.size()];
        int[] ticketsUntilReview = new int[attractions.size()];

        // Calculate tickets until next review (50 tickets per review)
        for (int i = 0; i < attractions.size(); i++) {
            Attraction attraction = attractions.get(i);
            int soldTickets = ticketCounter[attraction.getId()];
            int remainingTickets = 50 - (soldTickets % 50);

            if (remainingTickets == 50) {
                remainingTickets = 0; // Review needed now
            }

            attractionIds[i] = attraction.getId();
            attractionNames[i] = attraction.getName();
            ticketsUntilReview[i] = remainingTickets;
        }

        // Sort by tickets until review (ascending) using simple bubble sort
        for (int i = 0; i < attractions.size() - 1; i++) {
            for (int j = 0; j < attractions.size() - i - 1; j++) {
                if (ticketsUntilReview[j] > ticketsUntilReview[j + 1]) {
                    // Swap tickets
                    int tempTickets = ticketsUntilReview[j];
                    ticketsUntilReview[j] = ticketsUntilReview[j + 1];
                    ticketsUntilReview[j + 1] = tempTickets;

                    // Swap IDs
                    int tempId = attractionIds[j];
                    attractionIds[j] = attractionIds[j + 1];
                    attractionIds[j + 1] = tempId;

                    // Swap names
                    String tempName = attractionNames[j];
                    attractionNames[j] = attractionNames[j + 1];
                    attractionNames[j + 1] = tempName;
                }
            }
        }

        // Display the 3 nearest reviews
        System.out.println("+------+--------------------------------+-------------------+");
        System.out.println("| ID   | Attraction                     | Tickets Until Rev |");
        System.out.println("+------+--------------------------------+-------------------+");

        for (int i = 0; i < attractions.size() && i < 3; i++) {
            System.out.printf("| %-4d | %-30s | %-17d |\n",
                    attractionIds[i],
                    attractionNames[i],
                    ticketsUntilReview[i]);
        }

        System.out.println("+------+--------------------------------+-------------------+");
    }

    /**
     * Gets the history of maintenance reviews (3 most recent reviews)
     */
    public void getReviewsHistory() {
        // Method declaration only, not implemented yet
        System.out.println("Not implemented yet");
    }
}